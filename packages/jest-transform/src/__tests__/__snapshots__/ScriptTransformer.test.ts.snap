// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`ScriptTransformer (in sync mode) throws an error if \`process\` isn't defined 1`] = `
"<red><bold>‚óè Invalid synchronous transformer module:</intensity></color>
<red>  "skipped-required-props-preprocessor-only-async" specified in the "transform" object of Jest configuration</color>
<red>  must export a \`process\` function.</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer in async mode, passes expected transform options to getCacheKey 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "module.exports = "banana";",
      "/fruits/banana.js",
      Object {
        "cacheFS": Map {
          "/fruits/banana.js" => "module.exports = "banana";",
        },
        "collectCoverage": true,
        "collectCoverageFrom": Array [],
        "config": Object {
          "automock": false,
          "cache": true,
          "cacheDirectory": "/cache/",
          "clearMocks": false,
          "collectCoverageFrom": Array [
            "src",
            "!public",
          ],
          "coverageDirectory": "coverage",
          "coveragePathIgnorePatterns": Array [],
          "coverageReporters": Array [],
          "cwd": "/test_root_dir/",
          "detectLeaks": false,
          "detectOpenHandles": false,
          "displayName": undefined,
          "errorOnDeprecated": false,
          "extensionsToTreatAsEsm": Array [],
          "fakeTimers": Object {
            "enableGlobally": false,
          },
          "filter": undefined,
          "forceCoverageMatch": Array [],
          "globalSetup": undefined,
          "globalTeardown": undefined,
          "globals": Object {},
          "haste": Object {},
          "id": "test",
          "injectGlobals": true,
          "moduleDirectories": Array [],
          "moduleFileExtensions": Array [
            "js",
          ],
          "moduleNameMapper": Array [],
          "modulePathIgnorePatterns": Array [],
          "modulePaths": Array [],
          "openHandlesTimeout": 1000,
          "prettierPath": "prettier",
          "reporters": Array [
            "default",
            "custom-reporter-1",
            Array [
              "custom-reporter-2",
              Object {
                "configValue": true,
              },
            ],
          ],
          "resetMocks": false,
          "resetModules": false,
          "resolver": undefined,
          "restoreMocks": false,
          "rootDir": "/",
          "roots": Array [],
          "runner": "jest-runner",
          "runtime": "/test_module_loader_path",
          "sandboxInjectedGlobals": Array [],
          "setupFiles": Array [],
          "setupFilesAfterEnv": Array [],
          "skipFilter": false,
          "skipNodeResolution": false,
          "slowTestThreshold": 5,
          "snapshotFormat": Object {},
          "snapshotResolver": undefined,
          "snapshotSerializers": Array [],
          "testEnvironment": "node",
          "testEnvironmentOptions": Object {},
          "testLocationInResults": false,
          "testMatch": Array [],
          "testPathIgnorePatterns": Array [],
          "testRegex": Array [
            "\\.test\\.js$",
          ],
          "testRunner": "jest-circus/runner",
          "testTimeout": 5000,
          "transform": Array [
            Array [
              "\\.js$",
              "test_preprocessor",
              Object {
                "configKey": "configValue",
              },
            ],
          ],
          "transformIgnorePatterns": Array [
            "/node_modules/",
          ],
          "unmockedModulePathPatterns": undefined,
          "waitNextEventLoopTurnForUnhandledRejectionEvents": false,
          "watchPathIgnorePatterns": Array [],
        },
        "configString": "{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_preprocessor",{"configKey":"configValue"}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]}",
        "coverageProvider": "babel",
        "instrument": true,
        "supportsDynamicImport": false,
        "supportsExportNamespaceFrom": false,
        "supportsStaticESM": false,
        "supportsTopLevelAwait": false,
        "transformerConfig": Object {
          "configKey": "configValue",
        },
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": "ab",
    },
  ],
}
`;

exports[`ScriptTransformer in async mode, uses the supplied async preprocessor 1`] = `
"const TRANSFORMED = {
  filename: '/fruits/banana.js',
  script: 'module.exports = "banana";',
  config: '{"collectCoverage":false,"collectCoverageFrom":[],"coverageProvider":"babel","supportsDynamicImport":false,"supportsExportNamespaceFrom":false,"supportsStaticESM":false,"supportsTopLevelAwait":false,"instrument":false,"cacheFS":{},"config":{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_async_preprocessor",{}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]},"configString":"{\\"automock\\":false,\\"cache\\":true,\\"cacheDirectory\\":\\"/cache/\\",\\"clearMocks\\":false,\\"collectCoverageFrom\\":[\\"src\\",\\"!public\\"],\\"coverageDirectory\\":\\"coverage\\",\\"coveragePathIgnorePatterns\\":[],\\"coverageReporters\\":[],\\"cwd\\":\\"/test_root_dir/\\",\\"detectLeaks\\":false,\\"detectOpenHandles\\":false,\\"errorOnDeprecated\\":false,\\"extensionsToTreatAsEsm\\":[],\\"fakeTimers\\":{\\"enableGlobally\\":false},\\"forceCoverageMatch\\":[],\\"globals\\":{},\\"haste\\":{},\\"id\\":\\"test\\",\\"injectGlobals\\":true,\\"moduleDirectories\\":[],\\"moduleFileExtensions\\":[\\"js\\"],\\"moduleNameMapper\\":[],\\"modulePathIgnorePatterns\\":[],\\"modulePaths\\":[],\\"openHandlesTimeout\\":1000,\\"prettierPath\\":\\"prettier\\",\\"reporters\\":[\\"default\\",\\"custom-reporter-1\\",[\\"custom-reporter-2\\",{\\"configValue\\":true}]],\\"resetMocks\\":false,\\"resetModules\\":false,\\"restoreMocks\\":false,\\"rootDir\\":\\"/\\",\\"roots\\":[],\\"runner\\":\\"jest-runner\\",\\"runtime\\":\\"/test_module_loader_path\\",\\"sandboxInjectedGlobals\\":[],\\"setupFiles\\":[],\\"setupFilesAfterEnv\\":[],\\"skipFilter\\":false,\\"skipNodeResolution\\":false,\\"slowTestThreshold\\":5,\\"snapshotFormat\\":{},\\"snapshotSerializers\\":[],\\"testEnvironment\\":\\"node\\",\\"testEnvironmentOptions\\":{},\\"testLocationInResults\\":false,\\"testMatch\\":[],\\"testPathIgnorePatterns\\":[],\\"testRegex\\":[\\"\\\\\\\\.test\\\\\\\\.js$\\"],\\"testRunner\\":\\"jest-circus/runner\\",\\"testTimeout\\":5000,\\"transform\\":[[\\"\\\\\\\\.js$\\",\\"test_async_preprocessor\\",{}]],\\"transformIgnorePatterns\\":[\\"/node_modules/\\"],\\"waitNextEventLoopTurnForUnhandledRejectionEvents\\":false,\\"watchPathIgnorePatterns\\":[]}","transformerConfig":{}}',
};"
`;

exports[`ScriptTransformer in async mode, uses the supplied async preprocessor 2`] = `"module.exports = "react";"`;

exports[`ScriptTransformer in async mode, uses the supplied preprocessor 1`] = `
"const TRANSFORMED = {
  filename: '/fruits/banana.js',
  script: 'module.exports = "banana";',
  config: '{"collectCoverage":false,"collectCoverageFrom":[],"coverageProvider":"babel","supportsDynamicImport":false,"supportsExportNamespaceFrom":false,"supportsStaticESM":false,"supportsTopLevelAwait":false,"instrument":false,"cacheFS":{},"config":{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_preprocessor",{}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]},"configString":"{\\"automock\\":false,\\"cache\\":true,\\"cacheDirectory\\":\\"/cache/\\",\\"clearMocks\\":false,\\"collectCoverageFrom\\":[\\"src\\",\\"!public\\"],\\"coverageDirectory\\":\\"coverage\\",\\"coveragePathIgnorePatterns\\":[],\\"coverageReporters\\":[],\\"cwd\\":\\"/test_root_dir/\\",\\"detectLeaks\\":false,\\"detectOpenHandles\\":false,\\"errorOnDeprecated\\":false,\\"extensionsToTreatAsEsm\\":[],\\"fakeTimers\\":{\\"enableGlobally\\":false},\\"forceCoverageMatch\\":[],\\"globals\\":{},\\"haste\\":{},\\"id\\":\\"test\\",\\"injectGlobals\\":true,\\"moduleDirectories\\":[],\\"moduleFileExtensions\\":[\\"js\\"],\\"moduleNameMapper\\":[],\\"modulePathIgnorePatterns\\":[],\\"modulePaths\\":[],\\"openHandlesTimeout\\":1000,\\"prettierPath\\":\\"prettier\\",\\"reporters\\":[\\"default\\",\\"custom-reporter-1\\",[\\"custom-reporter-2\\",{\\"configValue\\":true}]],\\"resetMocks\\":false,\\"resetModules\\":false,\\"restoreMocks\\":false,\\"rootDir\\":\\"/\\",\\"roots\\":[],\\"runner\\":\\"jest-runner\\",\\"runtime\\":\\"/test_module_loader_path\\",\\"sandboxInjectedGlobals\\":[],\\"setupFiles\\":[],\\"setupFilesAfterEnv\\":[],\\"skipFilter\\":false,\\"skipNodeResolution\\":false,\\"slowTestThreshold\\":5,\\"snapshotFormat\\":{},\\"snapshotSerializers\\":[],\\"testEnvironment\\":\\"node\\",\\"testEnvironmentOptions\\":{},\\"testLocationInResults\\":false,\\"testMatch\\":[],\\"testPathIgnorePatterns\\":[],\\"testRegex\\":[\\"\\\\\\\\.test\\\\\\\\.js$\\"],\\"testRunner\\":\\"jest-circus/runner\\",\\"testTimeout\\":5000,\\"transform\\":[[\\"\\\\\\\\.js$\\",\\"test_preprocessor\\",{}]],\\"transformIgnorePatterns\\":[\\"/node_modules/\\"],\\"waitNextEventLoopTurnForUnhandledRejectionEvents\\":false,\\"watchPathIgnorePatterns\\":[]}","transformerConfig":{}}',
};"
`;

exports[`ScriptTransformer in async mode, uses the supplied preprocessor 2`] = `"module.exports = "react";"`;

exports[`ScriptTransformer in async mode, warns of unparseable inlined source maps from the preprocessor 1`] = `
"<yellow><bold>‚óè Invalid source map:</intensity></color>
<yellow>  The source map for "/fruits/banana.js" returned by "preprocessor-with-sourcemaps" is invalid.</color>
<yellow>  Proceeding without source mapping for that file.</color>"
`;

exports[`ScriptTransformer passes expected transform options to getCacheKey 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "module.exports = "banana";",
      "/fruits/banana.js",
      Object {
        "cacheFS": Map {
          "/fruits/banana.js" => "module.exports = "banana";",
        },
        "collectCoverage": true,
        "collectCoverageFrom": Array [],
        "config": Object {
          "automock": false,
          "cache": true,
          "cacheDirectory": "/cache/",
          "clearMocks": false,
          "collectCoverageFrom": Array [
            "src",
            "!public",
          ],
          "coverageDirectory": "coverage",
          "coveragePathIgnorePatterns": Array [],
          "coverageReporters": Array [],
          "cwd": "/test_root_dir/",
          "detectLeaks": false,
          "detectOpenHandles": false,
          "displayName": undefined,
          "errorOnDeprecated": false,
          "extensionsToTreatAsEsm": Array [],
          "fakeTimers": Object {
            "enableGlobally": false,
          },
          "filter": undefined,
          "forceCoverageMatch": Array [],
          "globalSetup": undefined,
          "globalTeardown": undefined,
          "globals": Object {},
          "haste": Object {},
          "id": "test",
          "injectGlobals": true,
          "moduleDirectories": Array [],
          "moduleFileExtensions": Array [
            "js",
          ],
          "moduleNameMapper": Array [],
          "modulePathIgnorePatterns": Array [],
          "modulePaths": Array [],
          "openHandlesTimeout": 1000,
          "prettierPath": "prettier",
          "reporters": Array [
            "default",
            "custom-reporter-1",
            Array [
              "custom-reporter-2",
              Object {
                "configValue": true,
              },
            ],
          ],
          "resetMocks": false,
          "resetModules": false,
          "resolver": undefined,
          "restoreMocks": false,
          "rootDir": "/",
          "roots": Array [],
          "runner": "jest-runner",
          "runtime": "/test_module_loader_path",
          "sandboxInjectedGlobals": Array [],
          "setupFiles": Array [],
          "setupFilesAfterEnv": Array [],
          "skipFilter": false,
          "skipNodeResolution": false,
          "slowTestThreshold": 5,
          "snapshotFormat": Object {},
          "snapshotResolver": undefined,
          "snapshotSerializers": Array [],
          "testEnvironment": "node",
          "testEnvironmentOptions": Object {},
          "testLocationInResults": false,
          "testMatch": Array [],
          "testPathIgnorePatterns": Array [],
          "testRegex": Array [
            "\\.test\\.js$",
          ],
          "testRunner": "jest-circus/runner",
          "testTimeout": 5000,
          "transform": Array [
            Array [
              "\\.js$",
              "test_preprocessor",
              Object {
                "configKey": "configValue",
              },
            ],
          ],
          "transformIgnorePatterns": Array [
            "/node_modules/",
          ],
          "unmockedModulePathPatterns": undefined,
          "waitNextEventLoopTurnForUnhandledRejectionEvents": false,
          "watchPathIgnorePatterns": Array [],
        },
        "configString": "{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_preprocessor",{"configKey":"configValue"}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]}",
        "coverageProvider": "babel",
        "instrument": true,
        "supportsDynamicImport": false,
        "supportsExportNamespaceFrom": false,
        "supportsStaticESM": false,
        "supportsTopLevelAwait": false,
        "transformerConfig": Object {
          "configKey": "configValue",
        },
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": "ab",
    },
  ],
}
`;

exports[`ScriptTransformer passes expected transform options to getCacheKeyAsync 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "module.exports = "banana";",
      "/fruits/banana.js",
      Object {
        "cacheFS": Map {
          "/fruits/banana.js" => "module.exports = "banana";",
        },
        "collectCoverage": true,
        "collectCoverageFrom": Array [],
        "config": Object {
          "automock": false,
          "cache": true,
          "cacheDirectory": "/cache/",
          "clearMocks": false,
          "collectCoverageFrom": Array [
            "src",
            "!public",
          ],
          "coverageDirectory": "coverage",
          "coveragePathIgnorePatterns": Array [],
          "coverageReporters": Array [],
          "cwd": "/test_root_dir/",
          "detectLeaks": false,
          "detectOpenHandles": false,
          "displayName": undefined,
          "errorOnDeprecated": false,
          "extensionsToTreatAsEsm": Array [],
          "fakeTimers": Object {
            "enableGlobally": false,
          },
          "filter": undefined,
          "forceCoverageMatch": Array [],
          "globalSetup": undefined,
          "globalTeardown": undefined,
          "globals": Object {},
          "haste": Object {},
          "id": "test",
          "injectGlobals": true,
          "moduleDirectories": Array [],
          "moduleFileExtensions": Array [
            "js",
          ],
          "moduleNameMapper": Array [],
          "modulePathIgnorePatterns": Array [],
          "modulePaths": Array [],
          "openHandlesTimeout": 1000,
          "prettierPath": "prettier",
          "reporters": Array [
            "default",
            "custom-reporter-1",
            Array [
              "custom-reporter-2",
              Object {
                "configValue": true,
              },
            ],
          ],
          "resetMocks": false,
          "resetModules": false,
          "resolver": undefined,
          "restoreMocks": false,
          "rootDir": "/",
          "roots": Array [],
          "runner": "jest-runner",
          "runtime": "/test_module_loader_path",
          "sandboxInjectedGlobals": Array [],
          "setupFiles": Array [],
          "setupFilesAfterEnv": Array [],
          "skipFilter": false,
          "skipNodeResolution": false,
          "slowTestThreshold": 5,
          "snapshotFormat": Object {},
          "snapshotResolver": undefined,
          "snapshotSerializers": Array [],
          "testEnvironment": "node",
          "testEnvironmentOptions": Object {},
          "testLocationInResults": false,
          "testMatch": Array [],
          "testPathIgnorePatterns": Array [],
          "testRegex": Array [
            "\\.test\\.js$",
          ],
          "testRunner": "jest-circus/runner",
          "testTimeout": 5000,
          "transform": Array [
            Array [
              "\\.js$",
              "test_async_preprocessor",
              Object {
                "configKey": "configValue",
              },
            ],
          ],
          "transformIgnorePatterns": Array [
            "/node_modules/",
          ],
          "unmockedModulePathPatterns": undefined,
          "waitNextEventLoopTurnForUnhandledRejectionEvents": false,
          "watchPathIgnorePatterns": Array [],
        },
        "configString": "{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_async_preprocessor",{"configKey":"configValue"}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]}",
        "coverageProvider": "babel",
        "instrument": true,
        "supportsDynamicImport": false,
        "supportsExportNamespaceFrom": false,
        "supportsStaticESM": false,
        "supportsTopLevelAwait": false,
        "transformerConfig": Object {
          "configKey": "configValue",
        },
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`ScriptTransformer throws an error if \`process\` doesn't return an object containing \`code\` key with processed string 1`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if \`process\` doesn't return an object containing \`code\` key with processed string 2`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if \`process\` doesn't return an object containing \`code\` key with processed string 3`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if \`process\` doesn't return an object containing \`code\` key with processed string 4`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if \`processAsync\` doesn't return a promise of object containing \`code\` key with processed string 1`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor-fruits-banana-js" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if \`processAsync\` doesn't return a promise of object containing \`code\` key with processed string 2`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor-fruits-avocado-js" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if \`processAsync\` doesn't return a promise of object containing \`code\` key with processed string 3`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor-fruits-kiwi-js" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if \`processAsync\` doesn't return a promise of object containing \`code\` key with processed string 4`] = `
"<red><bold>‚óè Invalid return value:</intensity></color>
<red>  \`process()\` or/and \`processAsync()\` method of code transformer found at </color>
<red>  "passthrough-preprocessor-fruits-grapefruit-js" </color>
<red>  should return an object or a Promise resolving to an object. The object </color>
<red>  must have \`code\` property with a string of processed code.</color>
<red>  <bold>This error may be caused by a breaking change in Jest 28:</intensity></color>
<red>  https://jest-archive-august-2023.netlify.app/docs/28.x/upgrading-to-jest28#transformer</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if createTransformer returns object without \`process\` method 1`] = `
"<red><bold>‚óè Invalid transformer module:</intensity></color>
<red>  "skipped-required-create-transformer-props-preprocessor" specified in the "transform" object of Jest configuration</color>
<red>  must export a \`process\` or \`processAsync\` or \`createTransformer\` function.</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer throws an error if neither \`process\` nor \`processAsync\` is defined 1`] = `
"<red><bold>‚óè Invalid transformer module:</intensity></color>
<red>  "skipped-required-props-preprocessor" specified in the "transform" object of Jest configuration</color>
<red>  must export a \`process\` or \`processAsync\` or \`createTransformer\` function.</color>
<red>  <bold>Code Transformation Documentation:</intensity></color>
<red>  https://jestjs.io/docs/code-transformation</color>
<red></color>"
`;

exports[`ScriptTransformer transforms a file async properly 1`] = `
"/* istanbul ignore next */
function cov_25u22311x4() {
  var path = "/fruits/banana.js";
  var hash = "3f8e915bed83285455a8a16aa04dc0cf5242d755";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/fruits/banana.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3f8e915bed83285455a8a16aa04dc0cf5242d755"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25u22311x4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25u22311x4();
cov_25u22311x4().s[0]++;
module.exports = "banana";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjV1MjIzMTF4NCIsImFjdHVhbENvdmVyYWdlIiwicyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJiYW5hbmEuanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcImJhbmFuYVwiOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBO0FBZlpDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0="
`;

exports[`ScriptTransformer transforms a file async properly 2`] = `
"/* istanbul ignore next */
function cov_23yvu8etmu() {
  var path = "/fruits/kiwi.js";
  var hash = "8b5afd38d79008f13ebc229b89ef82b12ee9447a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/fruits/kiwi.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      "1": {
        start: {
          line: 1,
          column: 23
        },
        end: {
          line: 1,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 1,
            column: 18
          }
        },
        loc: {
          start: {
            line: 1,
            column: 23
          },
          end: {
            line: 1,
            column: 29
          }
        },
        line: 1
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8b5afd38d79008f13ebc229b89ef82b12ee9447a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23yvu8etmu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23yvu8etmu();
cov_23yvu8etmu().s[0]++;
module.exports = () => {
  /* istanbul ignore next */
  cov_23yvu8etmu().f[0]++;
  cov_23yvu8etmu().s[1]++;
  return "kiwi";
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjN5dnU4ZXRtdSIsImFjdHVhbENvdmVyYWdlIiwicyIsIm1vZHVsZSIsImV4cG9ydHMiLCJmIl0sInNvdXJjZXMiOlsia2l3aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IFwia2l3aVwiOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZVk7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7QUFmWkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUFBO0VBQUFKLGNBQUEsR0FBQUssQ0FBQTtFQUFBTCxjQUFBLEdBQUFFLENBQUE7RUFBQSxhQUFNO0FBQUQsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ=="
`;

exports[`ScriptTransformer transforms a file properly 1`] = `
"/* istanbul ignore next */
function cov_25u22311x4() {
  var path = "/fruits/banana.js";
  var hash = "3f8e915bed83285455a8a16aa04dc0cf5242d755";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/fruits/banana.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3f8e915bed83285455a8a16aa04dc0cf5242d755"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25u22311x4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25u22311x4();
cov_25u22311x4().s[0]++;
module.exports = "banana";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjV1MjIzMTF4NCIsImFjdHVhbENvdmVyYWdlIiwicyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJiYW5hbmEuanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcImJhbmFuYVwiOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBO0FBZlpDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0="
`;

exports[`ScriptTransformer transforms a file properly 2`] = `
"/* istanbul ignore next */
function cov_23yvu8etmu() {
  var path = "/fruits/kiwi.js";
  var hash = "8b5afd38d79008f13ebc229b89ef82b12ee9447a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/fruits/kiwi.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      "1": {
        start: {
          line: 1,
          column: 23
        },
        end: {
          line: 1,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 1,
            column: 18
          }
        },
        loc: {
          start: {
            line: 1,
            column: 23
          },
          end: {
            line: 1,
            column: 29
          }
        },
        line: 1
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8b5afd38d79008f13ebc229b89ef82b12ee9447a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23yvu8etmu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23yvu8etmu();
cov_23yvu8etmu().s[0]++;
module.exports = () => {
  /* istanbul ignore next */
  cov_23yvu8etmu().f[0]++;
  cov_23yvu8etmu().s[1]++;
  return "kiwi";
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjN5dnU4ZXRtdSIsImFjdHVhbENvdmVyYWdlIiwicyIsIm1vZHVsZSIsImV4cG9ydHMiLCJmIl0sInNvdXJjZXMiOlsia2l3aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IFwia2l3aVwiOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZVk7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7QUFmWkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUFBO0VBQUFKLGNBQUEsR0FBQUssQ0FBQTtFQUFBTCxjQUFBLEdBQUFFLENBQUE7RUFBQSxhQUFNO0FBQUQsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ=="
`;

exports[`ScriptTransformer uses mixture of sync/async preprocessors 1`] = `
"const TRANSFORMED = {
  filename: '/fruits/banana.js',
  script: 'module.exports = "banana";',
  config: '{"collectCoverage":false,"collectCoverageFrom":[],"coverageProvider":"babel","supportsDynamicImport":false,"supportsExportNamespaceFrom":false,"supportsStaticESM":false,"supportsTopLevelAwait":false,"instrument":false,"cacheFS":{},"config":{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_async_preprocessor",{}],["\\\\.css$","css-preprocessor",{}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]},"configString":"{\\"automock\\":false,\\"cache\\":true,\\"cacheDirectory\\":\\"/cache/\\",\\"clearMocks\\":false,\\"collectCoverageFrom\\":[\\"src\\",\\"!public\\"],\\"coverageDirectory\\":\\"coverage\\",\\"coveragePathIgnorePatterns\\":[],\\"coverageReporters\\":[],\\"cwd\\":\\"/test_root_dir/\\",\\"detectLeaks\\":false,\\"detectOpenHandles\\":false,\\"errorOnDeprecated\\":false,\\"extensionsToTreatAsEsm\\":[],\\"fakeTimers\\":{\\"enableGlobally\\":false},\\"forceCoverageMatch\\":[],\\"globals\\":{},\\"haste\\":{},\\"id\\":\\"test\\",\\"injectGlobals\\":true,\\"moduleDirectories\\":[],\\"moduleFileExtensions\\":[\\"js\\"],\\"moduleNameMapper\\":[],\\"modulePathIgnorePatterns\\":[],\\"modulePaths\\":[],\\"openHandlesTimeout\\":1000,\\"prettierPath\\":\\"prettier\\",\\"reporters\\":[\\"default\\",\\"custom-reporter-1\\",[\\"custom-reporter-2\\",{\\"configValue\\":true}]],\\"resetMocks\\":false,\\"resetModules\\":false,\\"restoreMocks\\":false,\\"rootDir\\":\\"/\\",\\"roots\\":[],\\"runner\\":\\"jest-runner\\",\\"runtime\\":\\"/test_module_loader_path\\",\\"sandboxInjectedGlobals\\":[],\\"setupFiles\\":[],\\"setupFilesAfterEnv\\":[],\\"skipFilter\\":false,\\"skipNodeResolution\\":false,\\"slowTestThreshold\\":5,\\"snapshotFormat\\":{},\\"snapshotSerializers\\":[],\\"testEnvironment\\":\\"node\\",\\"testEnvironmentOptions\\":{},\\"testLocationInResults\\":false,\\"testMatch\\":[],\\"testPathIgnorePatterns\\":[],\\"testRegex\\":[\\"\\\\\\\\.test\\\\\\\\.js$\\"],\\"testRunner\\":\\"jest-circus/runner\\",\\"testTimeout\\":5000,\\"transform\\":[[\\"\\\\\\\\.js$\\",\\"test_async_preprocessor\\",{}],[\\"\\\\\\\\.css$\\",\\"css-preprocessor\\",{}]],\\"transformIgnorePatterns\\":[\\"/node_modules/\\"],\\"waitNextEventLoopTurnForUnhandledRejectionEvents\\":false,\\"watchPathIgnorePatterns\\":[]}","transformerConfig":{}}',
};"
`;

exports[`ScriptTransformer uses mixture of sync/async preprocessors 2`] = `
"module.exports = {
  filename: /styles/App.css,
  rawFirstLine: root {,
};"
`;

exports[`ScriptTransformer uses mixture of sync/async preprocessors 3`] = `"module.exports = "react";"`;

exports[`ScriptTransformer uses multiple preprocessors 1`] = `
"const TRANSFORMED = {
  filename: '/fruits/banana.js',
  script: 'module.exports = "banana";',
  config: '{"collectCoverage":false,"collectCoverageFrom":[],"coverageProvider":"babel","supportsDynamicImport":false,"supportsExportNamespaceFrom":false,"supportsStaticESM":false,"supportsTopLevelAwait":false,"instrument":false,"cacheFS":{},"config":{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_preprocessor",{}],["\\\\.css$","css-preprocessor",{}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]},"configString":"{\\"automock\\":false,\\"cache\\":true,\\"cacheDirectory\\":\\"/cache/\\",\\"clearMocks\\":false,\\"collectCoverageFrom\\":[\\"src\\",\\"!public\\"],\\"coverageDirectory\\":\\"coverage\\",\\"coveragePathIgnorePatterns\\":[],\\"coverageReporters\\":[],\\"cwd\\":\\"/test_root_dir/\\",\\"detectLeaks\\":false,\\"detectOpenHandles\\":false,\\"errorOnDeprecated\\":false,\\"extensionsToTreatAsEsm\\":[],\\"fakeTimers\\":{\\"enableGlobally\\":false},\\"forceCoverageMatch\\":[],\\"globals\\":{},\\"haste\\":{},\\"id\\":\\"test\\",\\"injectGlobals\\":true,\\"moduleDirectories\\":[],\\"moduleFileExtensions\\":[\\"js\\"],\\"moduleNameMapper\\":[],\\"modulePathIgnorePatterns\\":[],\\"modulePaths\\":[],\\"openHandlesTimeout\\":1000,\\"prettierPath\\":\\"prettier\\",\\"reporters\\":[\\"default\\",\\"custom-reporter-1\\",[\\"custom-reporter-2\\",{\\"configValue\\":true}]],\\"resetMocks\\":false,\\"resetModules\\":false,\\"restoreMocks\\":false,\\"rootDir\\":\\"/\\",\\"roots\\":[],\\"runner\\":\\"jest-runner\\",\\"runtime\\":\\"/test_module_loader_path\\",\\"sandboxInjectedGlobals\\":[],\\"setupFiles\\":[],\\"setupFilesAfterEnv\\":[],\\"skipFilter\\":false,\\"skipNodeResolution\\":false,\\"slowTestThreshold\\":5,\\"snapshotFormat\\":{},\\"snapshotSerializers\\":[],\\"testEnvironment\\":\\"node\\",\\"testEnvironmentOptions\\":{},\\"testLocationInResults\\":false,\\"testMatch\\":[],\\"testPathIgnorePatterns\\":[],\\"testRegex\\":[\\"\\\\\\\\.test\\\\\\\\.js$\\"],\\"testRunner\\":\\"jest-circus/runner\\",\\"testTimeout\\":5000,\\"transform\\":[[\\"\\\\\\\\.js$\\",\\"test_preprocessor\\",{}],[\\"\\\\\\\\.css$\\",\\"css-preprocessor\\",{}]],\\"transformIgnorePatterns\\":[\\"/node_modules/\\"],\\"waitNextEventLoopTurnForUnhandledRejectionEvents\\":false,\\"watchPathIgnorePatterns\\":[]}","transformerConfig":{}}',
};"
`;

exports[`ScriptTransformer uses multiple preprocessors 2`] = `
"module.exports = {
  filename: /styles/App.css,
  rawFirstLine: root {,
};"
`;

exports[`ScriptTransformer uses multiple preprocessors 3`] = `"module.exports = "react";"`;

exports[`ScriptTransformer uses the supplied preprocessor 1`] = `
"const TRANSFORMED = {
  filename: '/fruits/banana.js',
  script: 'module.exports = "banana";',
  config: '{"collectCoverage":false,"collectCoverageFrom":[],"coverageProvider":"babel","supportsDynamicImport":false,"supportsExportNamespaceFrom":false,"supportsStaticESM":false,"supportsTopLevelAwait":false,"instrument":false,"cacheFS":{},"config":{"automock":false,"cache":true,"cacheDirectory":"/cache/","clearMocks":false,"collectCoverageFrom":["src","!public"],"coverageDirectory":"coverage","coveragePathIgnorePatterns":[],"coverageReporters":[],"cwd":"/test_root_dir/","detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"extensionsToTreatAsEsm":[],"fakeTimers":{"enableGlobally":false},"forceCoverageMatch":[],"globals":{},"haste":{},"id":"test","injectGlobals":true,"moduleDirectories":[],"moduleFileExtensions":["js"],"moduleNameMapper":[],"modulePathIgnorePatterns":[],"modulePaths":[],"openHandlesTimeout":1000,"prettierPath":"prettier","reporters":["default","custom-reporter-1",["custom-reporter-2",{"configValue":true}]],"resetMocks":false,"resetModules":false,"restoreMocks":false,"rootDir":"/","roots":[],"runner":"jest-runner","runtime":"/test_module_loader_path","sandboxInjectedGlobals":[],"setupFiles":[],"setupFilesAfterEnv":[],"skipFilter":false,"skipNodeResolution":false,"slowTestThreshold":5,"snapshotFormat":{},"snapshotSerializers":[],"testEnvironment":"node","testEnvironmentOptions":{},"testLocationInResults":false,"testMatch":[],"testPathIgnorePatterns":[],"testRegex":["\\\\.test\\\\.js$"],"testRunner":"jest-circus/runner","testTimeout":5000,"transform":[["\\\\.js$","test_preprocessor",{}]],"transformIgnorePatterns":["/node_modules/"],"waitNextEventLoopTurnForUnhandledRejectionEvents":false,"watchPathIgnorePatterns":[]},"configString":"{\\"automock\\":false,\\"cache\\":true,\\"cacheDirectory\\":\\"/cache/\\",\\"clearMocks\\":false,\\"collectCoverageFrom\\":[\\"src\\",\\"!public\\"],\\"coverageDirectory\\":\\"coverage\\",\\"coveragePathIgnorePatterns\\":[],\\"coverageReporters\\":[],\\"cwd\\":\\"/test_root_dir/\\",\\"detectLeaks\\":false,\\"detectOpenHandles\\":false,\\"errorOnDeprecated\\":false,\\"extensionsToTreatAsEsm\\":[],\\"fakeTimers\\":{\\"enableGlobally\\":false},\\"forceCoverageMatch\\":[],\\"globals\\":{},\\"haste\\":{},\\"id\\":\\"test\\",\\"injectGlobals\\":true,\\"moduleDirectories\\":[],\\"moduleFileExtensions\\":[\\"js\\"],\\"moduleNameMapper\\":[],\\"modulePathIgnorePatterns\\":[],\\"modulePaths\\":[],\\"openHandlesTimeout\\":1000,\\"prettierPath\\":\\"prettier\\",\\"reporters\\":[\\"default\\",\\"custom-reporter-1\\",[\\"custom-reporter-2\\",{\\"configValue\\":true}]],\\"resetMocks\\":false,\\"resetModules\\":false,\\"restoreMocks\\":false,\\"rootDir\\":\\"/\\",\\"roots\\":[],\\"runner\\":\\"jest-runner\\",\\"runtime\\":\\"/test_module_loader_path\\",\\"sandboxInjectedGlobals\\":[],\\"setupFiles\\":[],\\"setupFilesAfterEnv\\":[],\\"skipFilter\\":false,\\"skipNodeResolution\\":false,\\"slowTestThreshold\\":5,\\"snapshotFormat\\":{},\\"snapshotSerializers\\":[],\\"testEnvironment\\":\\"node\\",\\"testEnvironmentOptions\\":{},\\"testLocationInResults\\":false,\\"testMatch\\":[],\\"testPathIgnorePatterns\\":[],\\"testRegex\\":[\\"\\\\\\\\.test\\\\\\\\.js$\\"],\\"testRunner\\":\\"jest-circus/runner\\",\\"testTimeout\\":5000,\\"transform\\":[[\\"\\\\\\\\.js$\\",\\"test_preprocessor\\",{}]],\\"transformIgnorePatterns\\":[\\"/node_modules/\\"],\\"waitNextEventLoopTurnForUnhandledRejectionEvents\\":false,\\"watchPathIgnorePatterns\\":[]}","transformerConfig":{}}',
};"
`;

exports[`ScriptTransformer uses the supplied preprocessor 2`] = `"module.exports = "react";"`;

exports[`ScriptTransformer warns of unparseable inlined source maps from the async preprocessor 1`] = `
"<yellow><bold>‚óè Invalid source map:</intensity></color>
<yellow>  The source map for "/fruits/banana.js" returned by "async-preprocessor-with-sourcemaps" is invalid.</color>
<yellow>  Proceeding without source mapping for that file.</color>"
`;

exports[`ScriptTransformer warns of unparseable inlined source maps from the preprocessor 1`] = `
"<yellow><bold>‚óè Invalid source map:</intensity></color>
<yellow>  The source map for "/fruits/banana.js" returned by "preprocessor-with-sourcemaps" is invalid.</color>
<yellow>  Proceeding without source mapping for that file.</color>"
`;
